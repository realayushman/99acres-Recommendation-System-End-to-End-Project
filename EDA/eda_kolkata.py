# -*- coding: utf-8 -*-
"""EDA kolkata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tw5NMMvSuQYiVP0W3tr4hpAtq4diZ1Vw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv("featured_kolkata (1).csv")

df.head()

df.duplicated().sum()

df.shape

df.drop_duplicates(inplace=True)

df.SUPER_SQFT.describe()

df.shape

df.columns

bar=['TRANSACT_TYPE', 'OWNTYPE', 'BEDROOM_NUM', 'PRICE_PER_UNIT_AREA',
       'FURNISH', 'FACING', 'AGE', 'TOTAL_FLOOR', 'PRICE_SQFT', 'AREA',
       'PRICE', 'TOTAL_LANDMARK_COUNT', 'BALCONY_NUM', 'FLOOR_NUM',
       'CARPET_SQFT', 'BUILTUP_SQFT', 'SUPER_SQFT', 'side', 'latitude',
       'longitude', 'society', 'preference', 'type', 'AmenityScore']

bar

df[['TRANSACT_TYPE']].value_counts()

df[['TRANSACT_TYPE']].value_counts().plot(kind='bar')

df.SUPER_SQFT.describe()

df[['AREA','PRICE']]

df['AREA']=df['AREA'].str.split(' ').str[0]

df['AREA']=df['AREA'].str.split('-')

df['AREA']

a=2
b=3

def Sum(list):
  sum=0
  for i in list:
    sum+=float(i)
  return sum/2

list=[8,2,3]
Sum(list)

def Mean(area):
  if len(area)==2:
    return Sum(area)
  else:
    return float(area[0])

Mean([518, 623])

df.SUPER_SQFT.describe()

df['AREA']=df['AREA'].apply(Mean)

df.shape

df['AREA'].info()

df.PRICE.str.split(' ').str[-1]

df.PRICE.str.split(' ').str[-1].value_counts()

df.PRICE.str.split(' ').str[-1].str.split('/').str[-1]

df['PRICE']=df['PRICE'].str.replace(',', '', regex=False)

df.PRICE.str.split(' ').str[-1].str.split('/').str[-1]

money_units=[]
for i in df.PRICE.str.split(' ').str[-1].str.split('/').str[-1]:
  if i not in money_units and i.isdigit() is False:
    money_units.append(i)

money_units

df['PRICE']

df['PRICE']=df['PRICE'].str.replace(' Onwards','')

df['PRICE']

def isfloat(value):
    try:
        float(value)
        return True
    except ValueError:
       return False

units = []

for price in df['PRICE']:
    if pd.isna(price):
        units.append(None)
    else:
        clean_price = str(price).replace('\xa0', ' ').strip()
        last_word = clean_price.split()[-1]
        if isfloat(last_word):
            units.append('R')
        else:
            units.append(last_word)

df['m_units'] = units



df[['PRICE','m_units']]

df['m_units'].str.split('/').str[0].str.split('').str[-1].value_counts()

df['m_units']=df['m_units'].str.split('/').str[-1]

df.SUPER_SQFT.describe()

df['m_units'].value_counts()

import re

def extract_numbers(price):
    if pd.isna(price):
        return []
    # Replace non-breaking space if needed
    price = str(price).replace('\xa0', ' ')
    # Extract all floats/integers using regex
    return re.findall(r'\d+(?:\.\d+)?', price)

df['temp'] = df['PRICE'].apply(extract_numbers)
df['temp']

def money(money_list, unit_list, bedroom_nos_list):
    converted = []
    for i, j, k in zip(money_list, unit_list, bedroom_nos_list):
        if j == 'L':
            converted.append(i * 100000)
        elif j == 'Cr':
            converted.append(i * 10000000)
        elif j == 'R':
            converted.append(i)
        else:
            converted.append(i * k)  # per bedroom
    return converted

df['Price']=df['temp'].apply(Mean)

df['converted_price'] = money(df['Price'], df['m_units'], df['BEDROOM_NUM'])

df[['PRICE','converted_price']]

df.SUPER_SQFT.describe()

df[['PRICE_PER_UNIT_AREA','PRICE_SQFT']]

df.info()

df['Price']=df['converted_price']

df.drop(['PRICE_PER_UNIT_AREA','PRICE','m_units','temp','converted_price'],axis=1,inplace=True)

df[['Price']]

df['society'].value_counts()

df['society'] = df['society'].str.strip().str.lower()
df['society'] = df['society'].replace({'on request': 'on request'})

df['society'].value_counts()

df['society']=df['society'].replace('on request',None)

df.shape

df['society'].value_counts()

vhigh=[]
high=[]
medium=[]
low=[]
vlow=[]

dic=df['society'].value_counts().to_dict()

for key,value in dic.items():
  if value > 50:
    vhigh.append(key)
  if value > 25 and value < 50 :
    high.append(key)
  if value > 10 and value < 25:
    medium.append(key)
  if value > 2 and value < 10:
    low.append(key)
  else:
    vlow.append(key)

len(vhigh),len(high),len(medium),len(low),len(vlow)

def con(i):
  if i in vhigh:
    return 5
  if i in high:
    return 4
  if i in medium:
    return 3
  if i in low:
    return 2
  if i in vlow:
    return 1
  else:
    return None

df['society']=df['society'].apply(con)

df.society

df['society'].value_counts()

df.info()

"""# **EDA starts from here**

**Univariate EDA**
"""

df.SUPER_SQFT.describe()

#df=df[df.type==2]

df.shape

df_filter=df[ ~(df['SUPERBUILTUP_SQFT'].isnull()) & ~(df['SUPER_SQFT'].isnull())]

df_filter[['SUPERBUILTUP_SQFT','SUPER_SQFT']]

df.SUPERBUILTUP_SQFT.describe()

df.drop(['SUPER_SQFT'],axis=1,inplace=True)

df.columns

df.describe()

df.PRICE_SQFT.mean()

df.isnull().sum()

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(df.Price,kde=True,bins=100)

df[df.Price<1000000]

df.Price.describe()

df['Price']=df['Price']/10000000

df.Price.describe()

sns.histplot(df.Price,kde=True,bins=100)

"""crazy skewness here. That indicates outliers"""

sns.boxplot(x=df['Price'],color='lightgreen')
plt.grid()

"""damn that confirms our suspission"""

df.Price.skew()

df.Price.kurt()

"""Crazy skewness and even crazier kurtosis"""

df['Price'].quantile([0.01,0.05,0.95,0.99])

Q1=df['Price'].describe()['25%']

Q1

Q3=df['Price'].describe()['75%']

IQR=Q3-Q1

IQR=float(IQR)

lower_b=Q1-1.5*IQR

upper_b=Q3 + 1.5*IQR

lower_b,upper_b

df.type

df.type.value_counts()

outliers=df[(df.Price <= -0.7074374999999999) | (df.Price >= 1.7524625)]

outliers.shape

"""607 rows, we cant just drop them. We will have to deal with it."""

outliers.Price.describe()

bins=[0,1,2,5,10, 20, 30, 40, 50, 100]
bin_labels=["0-1","1,2","2,5","5,10","10, 20","20, 30","30, 40","40, 50","50+"]

pd.cut(df.Price,bins=bins,labels=bin_labels,right=False).value_counts().sort_index().plot(kind='bar')

plt.figure(figsize=(15,6))

#without log transformation
plt.subplot(1,2,1)
sns.histplot(df['Price'],kde=True,bins=50,color='skyblue')
plt.title("Distribution of originl Price")
plt.xlabel("Price(in Cr)")
plt.ylabel("frequency")

#with log transformation
plt.subplot(1,2,2)
sns.histplot(np.log1p(df['Price']),kde=True,bins=50,color='lightgreen')
plt.title("Distribution of transformed Price")
plt.xlabel("log(Price)")
plt.ylabel("frequency")

plt.tight_layout()
plt.show()

df.columns

"""**Price per sqrt**"""

df['SUPERBUILTUP_SQFT'].isnull().sum()

df.SUPERBUILTUP_SQFT

df.SUPERBUILTUP_SQFT.describe()

sns.boxplot(df['PRICE_SQFT'],color='lightgreen')

sns.histplot(df.PRICE_SQFT,kde=True,bins=100)

"""Alright so there are many outliers in the data."""

Q1=df['PRICE_SQFT'].describe()['25%']
Q3=df['PRICE_SQFT'].describe()['75%']
IQR=Q3-Q1

lower_b=float(Q1-1.5*IQR)
upper_b=float(Q3+1.5*IQR)

lower_b,upper_b

Q1

IQR

outliers=df[(df.PRICE_SQFT < 0) | (df.PRICE_SQFT > upper_b)]
outliers.shape

"""a lot of outliers are present

**Bedrooms**
"""

df.BEDROOM_NUM.value_counts().sort_index().plot(kind='bar')

"""**area**"""

df.shape

df.SUPERBUILTUP_SQFT.isnull().sum()

"""we will handle the missing values while doing missing value imputation"""



df.SUPERBUILTUP_SQFT.max()

df.SUPERBUILTUP_SQFT.describe()

sns.histplot(df.SUPERBUILTUP_SQFT,kde=True,bins=10)

df.BUILTUP_SQFT.describe()

sns.boxplot(df.BUILTUP_SQFT)

df.CARPET_SQFT.describe()

"""**Observations**
1. There are a lot of outliers and missing values.
2. Data is heavily skewed

**The rest of the EDA we will do throughout the process. For now we will use a pandas profiling library to generate a EDA report**
"""

!pip uninstall pandas-profiling

!pip install ydata-profiling

from ydata_profiling import ProfileReport

profile=ProfileReport(df,title="Kolkata report",explorative=True)
profile.to_file("kolkata_report.html")

import os
print(os.getcwd())

from google.colab import files
files.download("kolkata_report.html")

